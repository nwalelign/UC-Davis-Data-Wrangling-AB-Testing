1. The final assignment table does not have everything you need to compute metrics such as a 30 day binary because it is lacking the sufficient information needed for it. An example of a column that would be missing would be the created_at column.

2. SQL CODE:

 SELECT item_id,
       test_a AS test_assignment,
       (CASE
            WHEN test_a IS NOT NULL then 'test_a'
            ELSE NULL
        END) AS test_number,
       (CASE
            WHEN test_a IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

UNION

SELECT item_id,
       test_b AS test_assignment,
       (CASE
            WHEN test_b IS NOT NULL then 'test_b'
            ELSE NULL
        END) AS test_number,
       (CASE
            WHEN test_b IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

UNION

SELECT item_id,
       test_c AS test_assignment,
       (CASE
            WHEN test_c IS NOT NULL then 'test_c'
            ELSE NULL
        END) AS test_number,
       (CASE
            WHEN test_c IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

UNION

SELECT item_id,
       test_d AS test_assignment,
       (CASE
                   WHEN test_d IS NOT NULL then 'test_d'
            ELSE NULL
        END) AS test_number,
       (CASE
            WHEN test_d IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

UNION

SELECT item_id,
       test_e AS test_assignment,
       (CASE
            WHEN test_e IS NOT NULL then 'test_e'
            ELSE NULL
        END) AS test_number,
       (CASE
            WHEN test_e IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

UNION

SELECT item_id,
       test_f AS test_assignment,
       (CASE
            WHEN test_f IS NOT NULL then 'test_f'
            ELSE NULL
        END) AS test_number,
       (CASE
                    WHEN test_f IS NOT NULL then NOW()
            ELSE NULL
        END) AS test_start_date
FROM dsv1069.final_assignments_qa

3. SQL CODE:

  SELECT test_assignment,
       COUNT(DISTINCT item_id) AS number_of_items,
       SUM(order_binary) AS items_ordered_30_day_window
       FROM
       (
            SELECT item_test.item_id,
            item_test.test_assignment,
            item_test.test_number,
            item_test.test_start_date,
            item_test.created_at,
            MAX(
                        CASE WHEN (created_at > test_start_date AND 
                       DATE_PART('day', created_at - test_start_date) <= 30) THEN 1
                 ELSE 0 END
                ) AS order_binary
         FROM
        (
         SELECT final_assignments.*,
                 DATE(orders.created_at) AS created_at
          FROM dsv1069.final_assignments AS final_assignments
          LEFT JOIN dsv1069.orders AS orders
            ON final_assignments.item_id = orders.item_id
            WHERE test_number = 'item_test_2'
       ) AS item_test
     GROUP BY item_test.item_id,
              item_test.test_assignment,
              item_test.test_number,
              item_test.test_start_date,
              item_test.created_at
  ) AS order_binary
GROUP BY test_assignment;

4.  SQL CODE:

      SELECT test_assignment,
       SUM(view_binary) AS views_binary_30,
       count(distinct item_id) AS items,
	   CAST(100*SUM(view_binary)/COUNT(item_id) AS FLOAT) AS viewed_percent,
      SUM(events)/COUNT(item_id) AS average_views_per_item
FROM (
SELECT test_events.item_id,
       test_events.test_assignment,
       test_events.test_number,
       test_events.test_date,
       count(event_id) as events,
       MAX(CASE
               WHEN (event_time > test_events.test_date
                     AND DATE_PART('day', event_time-test_date) <= 30) THEN 1
               ELSE 0
           END) AS view_binary
FROM
  (SELECT assignment.item_id AS item_id,
          test_assignment,
          test_number,
          test_start_date AS test_date,
          event_time,
          event_id
   FROM dsv1069.final_assignments assignment
   LEFT JOIN
       (SELECT event_time, 
              event_id,
               CASE
                   WHEN parameter_name = 'item_id' then cast (parameter_value AS float)
                   ELSE null
               END AS item_id
      FROM dsv1069.events
      WHERE event_name = 'view_item' ) AS views
     ON assignment.item_id =views.item_id
     WHERE test_number = 'item_test_2' 
     ) AS test_events
   GROUP BY test_events.item_id,
         test_events.test_assignment,
         test_events.test_number,
       test_events.test_date
         ) AS views_binary
GROUP BY 
test_assignment,
test_date;

5.  SQL CODE:

      SELECT 
       assignment,
       number,
       Count(DISTINCT item_id)  AS count_of_items,
       Sum(view_binary_30_days) AS view_binary_30_days
      FROM   (SELECT final_assignments.item_id AS item_id,
               test_assignment           AS assignment,
               test_number               AS number,
               test_start_date           AS start_date,
               Max(( CASE
                       WHEN Date(event_time) - Date(test_start_date) BETWEEN 0
                            AND 30
                     THEN 1
                       ELSE 0
                     END ))              AS view_binary_30_days
        FROM   dsv1069.final_assignments
               LEFT JOIN dsv1069.view_item_events
                      ON final_assignments.item_id = view_item_events.item_id
        WHERE  test_number = 'item_test_2'
        GROUP  BY final_assignments.item_id,
                  test_assignment,
                  test_number,
                  test_start_date) AS view_binary
GROUP  BY assignment,
          number,
          Start_date;

